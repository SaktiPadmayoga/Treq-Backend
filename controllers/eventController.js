const Event = require('../models/Event');

// @desc    Get all events for logged-in user
// @route   GET /api/events
// @access  Private
const getEvents = async (req, res) => {
  try {
    const events = await Event.find({ user_id: req.user._id });
    res.status(200).json(events);
  } catch (error) {
    res.status(500).json({ message: 'Failed to get events', error });
  }
};

// @desc    Get single event by ID
// @route   GET /api/events/:id
// @access  Private
const getEventById = async (req, res) => {
  try {
    const event = await Event.findOne({ _id: req.params.id, user_id: req.user._id });
    if (!event) return res.status(404).json({ message: 'Event not found' });

    res.status(200).json(event);
  } catch (error) {
    res.status(500).json({ message: 'Failed to get event', error });
  }
};

// @desc    Create a new event (optional, mostly auto-generated by subject/task/exam)
// @route   POST /api/events
// @access  Private
const createEvent = async (req, res) => {
  try {
    const event = await Event.create({ ...req.body, user_id: req.user._id });
    res.status(201).json(event);
  } catch (error) {
    res.status(500).json({ message: 'Failed to create event', error });
  }
};

// @desc    Update event manually
// @route   PUT /api/events/:id
// @access  Private
const updateEvent = async (req, res) => {
  try {
    const event = await Event.findOne({ _id: req.params.id, user_id: req.user._id });
    if (!event) return res.status(404).json({ message: 'Event not found' });

    const updatedEvent = await Event.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.status(200).json(updatedEvent);
  } catch (error) {
    res.status(500).json({ message: 'Failed to update event', error });
  }
};

// @desc    Delete an event manually (optional)
// @route   DELETE /api/events/:id
// @access  Private
const deleteEvent = async (req, res) => {
  try {
    const event = await Event.findOne({ _id: req.params.id, user_id: req.user._id });
    if (!event) return res.status(404).json({ message: 'Event not found' });

    await Event.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: 'Event deleted' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to delete event', error });
  }
};

// @desc    Get calendar events within a date range (e.g., for calendar view)
// @route   GET /api/events/calendar
// @access  Private
const getCalendarEvents = async (req, res) => {
    try {
      const { start, end } = req.query;
  
      if (!start || !end) {
        return res.status(400).json({ message: "Start and end dates are required" });
      }
  
      const events = await Event.find({
        user_id: req.user._id,
        date: {
          $gte: new Date(start),
          $lte: new Date(end)
        }
      });
  
      res.status(200).json(events);
    } catch (error) {
      res.status(500).json({ message: 'Failed to fetch calendar events', error });
    }
  };
  

  module.exports = {
    getEvents,
    getEventById,
    createEvent,
    updateEvent,
    deleteEvent,
    getCalendarEvents
  };
  